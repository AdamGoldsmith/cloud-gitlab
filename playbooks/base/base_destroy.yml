---

- name: Cloud provider base configuration destruction
  hosts: localhost
  connection: local
  gather_facts: no
  tags:
    - never
    - destroy
    - base_destroy

  tasks:

    - name: GCP block
      block:

        - name: Destroy base cloud configuration resources
          vars:
            service_name: base
            tf_vars:
              region_name: "{{ project_region }}"
              network_name: "{{ project_data['network']['name'] }}"
          terraform:
            project_path: "{{ inventory_dir |
              default(ansible_inventory_sources[0])
              }}/../terraform/{{ cloud_provider }}/{{ service_name }}"
            state: absent
            lock: yes
            variables: "{{ tf_cred_data |
              combine(tf_vars) }}"
            backend_config: "{{ tf_backend_config }}"

      when:
        - cloud_provider is defined
        - cloud_provider == 'gcp'

  post_tasks:

    # TODO: Requires some work here because bucket is not empty on destroy
    # # Use Ansible to destroy bucket for storing terraform remote state files.
    # - name: Destroy terraform backend storage bucket
    #   gcp_storage_bucket:
    #     name: "{{ gcp_data['project_name'] }}-tfstate"
    #     location: "{{ project_region }}"
    #     versioning:
    #       enabled: yes
    #     project: "{{ gcp_data['project_name'] }}"
    #     auth_kind: "{{ gcp_data['auth_kind'] }}"
    #     service_account_file: "{{ gcp_data['cred_file'] }}"
    #     state: absent

    # - pause:
