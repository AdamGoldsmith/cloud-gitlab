---

- name: Install software dependencies
  vars:
    packages:
      - zip
      - unzip
      - python3
  package:
    name: "{{ packages }}"
    state: present

- name: Download vault binary ({{ vault_src | basename }})
  get_url:
    url: "{{ vault_src }}"
    checksum: "{{ vault_chksum }}"
    dest: "/tmp/{{ vault_src | basename }}"
    force: yes
    owner: root
    group: root

- name: Unzip vault binary ({{ vault_src | basename }})
  unarchive:
    src: "/tmp/{{ vault_src | basename }}"
    remote_src: yes
    dest: "{{ vault_bin_path }}"
    creates: "{{ vault_bin_path }}/vault"
    owner: root
    group: root
    mode: "0755"
    keep_newer: true

- name: Create vault group
  group:
    name: "{{ vault_group }}"
    gid: "{{ vault_gid }}"
    state: present

- name: Create vault user
  user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    uid: "{{ vault_uid }}"
    comment: "vault systemd service user"
    shell: /sbin/nologin
    system: yes
    state: present

- name: Create vault directory structures
  file:
    path: "{{ item }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0750"
    state: directory
  loop:
    - "{{ vault_conf | dirname }}"
    - "{{ vault_certs }}"
    - "{{ vault_data_path }}"

- name: Install python3-pip
  vars:
    packages:
      - python3-pip
  package:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: Upgrade PIP
  pip:
    name: pip
    state: latest
    executable: pip3

- name: TLS block
  vars:
    ansible_python_interpreter: /usr/bin/python3
  block:

    - name: Install python cryptography dependencies
      pip:
        name: "{{ item }}"
        executable: pip3
      loop:
        - "cryptography"

    - name: Generate OpenSSL private key pem file
      openssl_privatekey:
        path: "{{ vault_privkey }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0600"

    - name: Generate an OpenSSL CSR
      openssl_csr:
        path: "{{ vault_csr }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0644"
        privatekey_path: "{{ vault_privkey }}"
        common_name: "{{ vault_cn }}"
        country_name: "{{ vault_cc }}"
        organization_name: "{{ vault_on }}"

    - name: Generate a Self-Signed OpenSSL certificate
      openssl_certificate:
        path: "{{ vault_certfile }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0644"
        privatekey_path: "{{ vault_privkey }}"
        csr_path: "{{ vault_csr }}"
        provider: selfsigned

    - name: Read TLS private key file
      slurp:
        path: "{{ vault_privkey }}"
      register: private_key_slurp

    - name: Read TLS certificate file
      slurp:
        path: "{{ vault_certfile }}"
      register: cert_slurp

    - name: Write TLS certificate of all other vault hosts locally
      copy:
        dest: "{{ hostvars[vault_host]['cert_slurp']['source'] }}"
        content: "{{ hostvars[vault_host]['cert_slurp']['content'] | b64decode }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0644"
      loop: "{{ ansible_play_hosts |
        reject('equalto', inventory_hostname) | list }}"
      loop_control:
        loop_var: vault_host

  when: not vault_tls_disable | default(false) | bool

- name: Create vault server configuration
  template:
    src: config.j2
    dest: "{{ vault_conf }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0640"

- name: Create vault systemd service config
  template:
    src: service.j2
    dest: "/etc/systemd/system/{{ vault_service }}.service"
    owner: root
    group: root
    mode: "0664"

- name: Start and enable vault systemd service
  systemd:
    name: "{{ vault_service }}"
    daemon_reload: yes
    state: started
    enabled: yes

- name: Set VAULT_ADDR listener in profile
  template:
    src: profile.j2
    dest: /etc/profile.d/vault.sh
    owner: root
    group: root
    mode: "0755"
